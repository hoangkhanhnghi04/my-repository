# -*- coding: utf-8 -*-
"""Norm and LASSO.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b7TzVmFEVL-V63wyZm7irJEn2dOpuhMJ
"""

from google.colab import drive
import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
from sklearn.linear_model import Lasso
from sklearn.linear_model import Ridge

from sklearn import preprocessing
from sklearn.preprocessing import MinMaxScaler

drive.mount('/content/drive')

!ls "/content/drive/MyDrive/Data 270 project/Data"

combined = pd.read_csv("/content/drive/MyDrive/Data 270 project/Data/COMBINED_TABLE.csv")
combined_df = pd.DataFrame(combined)

combined_df.describe().transpose()

x = combined_df.iloc[:,1:].values #returns a numpy array
min_max_scaler = preprocessing.MinMaxScaler()
x_scaled = min_max_scaler.fit_transform(x)

normalized = pd.DataFrame(combined_df["DATE"]).join(pd.DataFrame(x_scaled))
normalized.columns = list(combined_df)
normalized['DATE'] = pd.to_datetime(normalized.DATE)
normalized.set_index('DATE', inplace=True)

normalized.head()

import os

os.getcwd()

#normalized.to_csv("/content/drive/MyDrive/Data 270 project/Data/NORMALIZED_TABLE.csv")

predictors = normalized.iloc[:,1:25]
response = pd.Series(normalized.iloc[:, -1])

X_train, X_test, Y_train, Y_test = train_test_split(predictors, response, test_size = 0.20)

print(X_train.shape)
print(X_test.shape)

linearreg = LinearRegression()
linearreg.fit(X_train, Y_train)

linearreg_prediction = linearreg.predict(X_test)

R_squared = r2_score(linearreg_prediction, Y_test)
print("R squared Error on test set: ", R_squared)

coefficient_df = pd.DataFrame()
coefficient_df["Column_Name"] = X_train.columns
coefficient_df['Coefficient_Value'] = pd.Series(linearreg.coef_)
print(coefficient_df.head(15))

plt.rcParams["figure.figsize"] = (15,10)

plt.barh(coefficient_df["Column_Name"],coefficient_df["Coefficient_Value"])

lassoRegressor = Lasso(alpha = 0.0005)
lassoRegressor.fit(X_train,Y_train)
y_predicted_lasso = lassoRegressor.predict(X_test)

R_squared = r2_score(y_predicted_lasso,Y_test)
print("R squared Error on test set: ", R_squared)

coefficient_df = pd.DataFrame()
coefficient_df["Column_Name"] = X_train.columns
coefficient_df['Coefficient_Value'] = pd.Series(lassoRegressor.coef_)
print(coefficient_df)

plt.rcParams["figure.figsize"] = (10,6)

plt.barh(coefficient_df["Column_Name"], coefficient_df["Coefficient_Value"])

from sklearn.linear_model import LassoCV

# Lasso with 5 fold cross-validation
model = LassoCV(cv=5, random_state=0, max_iter=10000)

# Fit model
model.fit(X_train, Y_train)
print(3.45662078449275e-05)

sns.set(rc={"figure.figsize":(30, 10)})
normalized.iloc[:,1:].plot()
plt.legend(loc='upper right')